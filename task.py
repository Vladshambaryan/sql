Структура данных:
Реляционные базы данных (SQL): Данные хранятся в виде таблиц, где строки представляют записи, а столбцы — атрибуты. 
Все таблицы связаны друг с другом через ключи (первичные и внешние). 
Строгая схема задает типы данных и их взаимосвязи.
Нереляционные базы данных (NoSQL): Данные могут храниться в виде документов, ключ-значение, графов или столбцов. 
Такие базы данных более гибкие, не требуют строгой схемы, что позволяет хранить данные в произвольных структурах, например, JSON
==
Реляционные базы данных: Используют язык SQL для выполнения запросов, который ориентирован на работу с таблицами, присоединение данных,
фильтрацию, агрегацию и прочие операции.
Нереляционные базы данных: Для работы с данными применяются специализированные языки запросов или API, которые могут быть более простыми 
или более сложными, в зависимости от модели хранения данных.
==
Использование:
Реляционные базы данных: Хорошо подходят для приложений с четко определенной структурой данных и сложными запросами, 
такими как ERP-системы, банковские системы.
Нереляционные базы данных: Часто применяются в системах с большим объемом неструктурированных данных, таких как социальные сети,
системы мониторинга, big data проекты.
Примеры реляционных БД: MySQL, PostgreSQL, Oracle. Примеры нереляционных БД: MongoDB, Cassandra, Redis.
  ==
SELECT year
FROM movies
  ==
 SELECT tiitle
FROM movies 
  ==
 SELECT id, name
FROM products
  ==
  SELECT *
FROM departments
  ==
SELECT * 
FROM movies ORDER BY year
  ==
SELECT *
FROM costomers
Order by age DESC
  ==
 SELECT *
FROM costomers
Order by age ASC
  ==
SELECT *      # LIMIT используется для пропуска уменьшения количества записей
FROM emploers 
LIMIT 10 
  ==
 SELECT *     #  Сортирует записи в порядке убывания (от наибольшего значения к наименьшему)
FROM products 
ORDER BY price DESC LIMIT 10 #  Ограничивает результат выборки 10 первыми строками 
  ==
SELECT title
FROM movies
LIMIT 1 OFFSET 1 # OFFSET пропуск
  ==
SELECT name, prise * delivery
FROM sales
  ==
SELECT * 
FROM studio 
WHERE name = "walt Disney"
  ==
SELECT title
FROM movies 
WHERE gear > 2000          
  ==
SELECT * 
FROM songs 
WHERE length > 3 
  ==
        
          
          













  
